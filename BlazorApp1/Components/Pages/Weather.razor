@page "/weather"
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (filteredForecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p><strong>Warm days above 15°C: @warmDays</strong></p>

    <input class="form-control mb-2" placeholder="Filter by summary..." @oninput="InputFilter" />

    <button class="btn btn-primary me-2" @onclick="FilterWarmDays">Show warm days</button>
    <button class="btn btn-secondary" @onclick="RestoreForecasts">Restore</button>

    <table class="table mt-3">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in filteredForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? filteredForecasts;
    private int warmDays = 0;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // Simulate loading

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

        // Copy forecasts to filteredForecasts
        filteredForecasts = forecasts.ToArray();

        // Count warm days
        warmDays = forecasts.Count(f => f.TemperatureC > 15);
    }

    private void FilterWarmDays()
    {
        if (forecasts != null)
        {
            filteredForecasts = forecasts.Where(f => f.TemperatureC > 15).ToArray();
        }
    }

    private void RestoreForecasts()
    {
        if (forecasts != null)
        {
            filteredForecasts = forecasts.ToArray();
        }
    }

    private void InputFilter(ChangeEventArgs e)
    {
        var input = e.Value?.ToString()?.Trim() ?? "";

        if (string.IsNullOrWhiteSpace(input))
        {
            RestoreForecasts();
        }
        else
        {
            filteredForecasts = forecasts?.Where(f => f.Summary?.Contains(input, StringComparison.OrdinalIgnoreCase) == true).ToArray();
        }
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
